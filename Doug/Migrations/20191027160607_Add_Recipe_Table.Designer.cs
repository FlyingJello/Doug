// <auto-generated />
using System;
using Doug;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Doug.Migrations
{
    [DbContext(typeof(DougContext))]
    [Migration("20191027160607_Add_Recipe_Table")]
    partial class Add_Recipe_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Doug.Models.Channel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Doug.Models.Coffee.CoffeeBreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BotToken");

                    b.Property<string>("CoffeeRemindJobId");

                    b.Property<int>("FatCounter");

                    b.Property<bool>("IsCoffeeBreak");

                    b.Property<DateTime>("LastCoffee");

                    b.Property<string>("UserToken");

                    b.HasKey("Id");

                    b.ToTable("CoffeeBreak");
                });

            modelBuilder.Entity("Doug.Models.Coffee.Roster", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsReady");

                    b.Property<bool>("IsSkipping");

                    b.HasKey("Id");

                    b.ToTable("Roster");
                });

            modelBuilder.Entity("Doug.Models.GambleChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<string>("RequesterId");

                    b.Property<string>("TargetId");

                    b.HasKey("Id");

                    b.ToTable("GambleChallenges");
                });

            modelBuilder.Entity("Doug.Models.Government", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RevolutionCooldown");

                    b.Property<string>("RevolutionLeader");

                    b.Property<string>("RevolutionTimestamp");

                    b.Property<string>("Ruler");

                    b.Property<double>("TaxRate");

                    b.HasKey("Id");

                    b.ToTable("Government");
                });

            modelBuilder.Entity("Doug.Models.InventoryItem", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("InventoryPosition");

                    b.Property<string>("ItemId");

                    b.Property<int>("Quantity");

                    b.HasKey("UserId", "InventoryPosition");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("Doug.Models.Monsters.MonsterAttacker", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("SpawnedMonsterId");

                    b.Property<int>("DamageDealt");

                    b.HasKey("UserId", "SpawnedMonsterId");

                    b.HasIndex("SpawnedMonsterId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MonsterAttacker");
                });

            modelBuilder.Entity("Doug.Models.Monsters.RegionMonster", b =>
                {
                    b.Property<string>("ChannelId");

                    b.Property<string>("MonsterId");

                    b.HasKey("ChannelId", "MonsterId");

                    b.ToTable("RegionMonster");
                });

            modelBuilder.Entity("Doug.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Doug.Models.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Result");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Doug.Models.Shop", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<double>("PriceMultiplier");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Doug.Models.ShopItem", b =>
                {
                    b.Property<string>("ShopId");

                    b.Property<string>("ItemId");

                    b.HasKey("ShopId", "ItemId");

                    b.ToTable("ShopItem");
                });

            modelBuilder.Entity("Doug.Models.Slurs.RecentFlame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SlurId");

                    b.Property<string>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("RecentSlurs");
                });

            modelBuilder.Entity("Doug.Models.Slurs.Slur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Slurs");
                });

            modelBuilder.Entity("Doug.Models.User.Loadout", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<string>("Boots");

                    b.Property<string>("Gloves");

                    b.Property<string>("Head");

                    b.Property<string>("LeftHand");

                    b.Property<string>("Neck");

                    b.Property<string>("RightHand");

                    b.Property<string>("Skill");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Doug.Models.User.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("Agility");

                    b.Property<DateTime>("AttackCooldown");

                    b.Property<int>("Constitution");

                    b.Property<int>("Credits");

                    b.Property<int>("Energy");

                    b.Property<long>("Experience");

                    b.Property<int>("Health");

                    b.Property<int>("Intelligence");

                    b.Property<int>("Luck");

                    b.Property<int?>("PartyId");

                    b.Property<DateTime>("SkillCooldown");

                    b.Property<int>("Strength");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Doug.Models.User.UserEffect", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("EffectId");

                    b.Property<DateTime>("EndTime");

                    b.HasKey("UserId", "EffectId");

                    b.ToTable("UserEffect");
                });

            modelBuilder.Entity("Doug.Monsters.SpawnedMonster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttackCooldown");

                    b.Property<string>("Channel");

                    b.Property<int>("Health");

                    b.Property<string>("MonsterId");

                    b.HasKey("Id");

                    b.ToTable("SpawnedMonsters");
                });

            modelBuilder.Entity("Doug.Models.InventoryItem", b =>
                {
                    b.HasOne("Doug.Models.User.User", "User")
                        .WithMany("InventoryItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.Monsters.MonsterAttacker", b =>
                {
                    b.HasOne("Doug.Monsters.SpawnedMonster", "Monster")
                        .WithMany("MonsterAttackers")
                        .HasForeignKey("SpawnedMonsterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doug.Models.User.User", "User")
                        .WithOne()
                        .HasForeignKey("Doug.Models.Monsters.MonsterAttacker", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.Monsters.RegionMonster", b =>
                {
                    b.HasOne("Doug.Models.Channel", "Channel")
                        .WithMany("Monsters")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.Party", b =>
                {
                    b.HasOne("Doug.Models.User.User", "Leader")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Doug.Models.ShopItem", b =>
                {
                    b.HasOne("Doug.Models.Shop", "Shop")
                        .WithMany("ShopItems")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.User.User", b =>
                {
                    b.HasOne("Doug.Models.User.Loadout", "Loadout")
                        .WithOne()
                        .HasForeignKey("Doug.Models.User.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doug.Models.Party")
                        .WithMany("Users")
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("Doug.Models.User.UserEffect", b =>
                {
                    b.HasOne("Doug.Models.User.User", "User")
                        .WithMany("Effects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
