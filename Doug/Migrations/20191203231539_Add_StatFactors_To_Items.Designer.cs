// <auto-generated />
using System;
using Doug;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Doug.Migrations
{
    [DbContext(typeof(DougContext))]
    [Migration("20191203231539_Add_StatFactors_To_Items")]
    partial class Add_StatFactors_To_Items
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Doug.Items.Item", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionId");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Icon");

                    b.Property<bool>("IsSellable");

                    b.Property<bool>("IsTradable");

                    b.Property<int>("MaxStack");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.Property<int>("Rarity");

                    b.Property<string>("TargetActionId");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("Doug.Models.Channel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Doug.Models.Coffee.CoffeeBreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BotToken");

                    b.Property<string>("CoffeeRemindJobId");

                    b.Property<int>("FatCounter");

                    b.Property<bool>("IsCoffeeBreak");

                    b.Property<DateTime>("LastCoffee");

                    b.Property<string>("UserToken");

                    b.HasKey("Id");

                    b.ToTable("CoffeeBreak");
                });

            modelBuilder.Entity("Doug.Models.Coffee.Roster", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsReady");

                    b.Property<bool>("IsSkipping");

                    b.HasKey("Id");

                    b.ToTable("Roster");
                });

            modelBuilder.Entity("Doug.Models.DropTable", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Droptables");
                });

            modelBuilder.Entity("Doug.Models.GambleChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("RequesterId");

                    b.Property<string>("TargetId");

                    b.HasKey("Id");

                    b.ToTable("GambleChallenges");
                });

            modelBuilder.Entity("Doug.Models.Government", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("RevolutionCooldown");

                    b.Property<string>("RevolutionLeader");

                    b.Property<string>("RevolutionTimestamp");

                    b.Property<string>("Ruler");

                    b.Property<double>("TaxRate");

                    b.HasKey("Id");

                    b.ToTable("Government");
                });

            modelBuilder.Entity("Doug.Models.LootItem", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("DropTableId");

                    b.Property<double>("Probability");

                    b.Property<int>("Quantity");

                    b.HasKey("Id", "DropTableId");

                    b.HasIndex("DropTableId");

                    b.ToTable("LootItem");
                });

            modelBuilder.Entity("Doug.Models.Monsters.Monster", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttackCooldown");

                    b.Property<int>("CriticalHitChance");

                    b.Property<int>("DamageType");

                    b.Property<int>("Defense");

                    b.Property<string>("Description");

                    b.Property<int>("Dodge");

                    b.Property<string>("DropTableId");

                    b.Property<int>("ExperienceValue");

                    b.Property<int>("Health");

                    b.Property<int>("Hitrate");

                    b.Property<string>("Image");

                    b.Property<int>("Level");

                    b.Property<int>("MaxAttack");

                    b.Property<int>("MinAttack");

                    b.Property<string>("Name");

                    b.Property<string>("Region");

                    b.Property<int>("Resistance");

                    b.HasKey("Id");

                    b.HasIndex("DropTableId");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Doug.Models.Monsters.MonsterAttacker", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("SpawnedMonsterId");

                    b.Property<int>("DamageDealt");

                    b.HasKey("UserId", "SpawnedMonsterId");

                    b.HasAlternateKey("SpawnedMonsterId", "UserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MonsterAttacker");
                });

            modelBuilder.Entity("Doug.Models.Monsters.RegionMonster", b =>
                {
                    b.Property<string>("ChannelId");

                    b.Property<string>("MonsterId");

                    b.HasKey("ChannelId", "MonsterId");

                    b.ToTable("RegionMonster");
                });

            modelBuilder.Entity("Doug.Models.Monsters.SpawnedMonster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AttackCooldown");

                    b.Property<string>("Channel");

                    b.Property<int>("Health");

                    b.Property<string>("MonsterId");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.ToTable("SpawnedMonsters");
                });

            modelBuilder.Entity("Doug.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Doug.Models.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Result");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Doug.Models.Shop", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<double>("PriceMultiplier");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Doug.Models.ShopItem", b =>
                {
                    b.Property<string>("ShopId");

                    b.Property<string>("ItemId");

                    b.HasKey("ShopId", "ItemId");

                    b.ToTable("ShopItem");
                });

            modelBuilder.Entity("Doug.Models.Slurs.RecentFlame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SlurId");

                    b.Property<string>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("RecentSlurs");
                });

            modelBuilder.Entity("Doug.Models.Slurs.Slur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Slurs");
                });

            modelBuilder.Entity("Doug.Models.User.InventoryItem", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("InventoryPosition");

                    b.Property<string>("ItemId");

                    b.Property<int>("Quantity");

                    b.HasKey("UserId", "InventoryPosition");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("Doug.Models.User.Loadout", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BodyId");

                    b.Property<string>("BootsId");

                    b.Property<string>("GlovesId");

                    b.Property<string>("HeadId");

                    b.Property<string>("LeftHandId");

                    b.Property<string>("LeftRingId");

                    b.Property<string>("NeckId");

                    b.Property<string>("RightHandId");

                    b.Property<string>("RightRingId");

                    b.Property<string>("SkillbookId");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.HasIndex("BootsId");

                    b.HasIndex("GlovesId");

                    b.HasIndex("HeadId");

                    b.HasIndex("LeftHandId");

                    b.HasIndex("LeftRingId");

                    b.HasIndex("NeckId");

                    b.HasIndex("RightHandId");

                    b.HasIndex("RightRingId");

                    b.HasIndex("SkillbookId");

                    b.ToTable("Loadout");
                });

            modelBuilder.Entity("Doug.Models.User.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Agility");

                    b.Property<DateTime>("AttackCooldown");

                    b.Property<int>("Constitution");

                    b.Property<int>("Credits");

                    b.Property<int>("Energy");

                    b.Property<long>("Experience");

                    b.Property<int>("Health");

                    b.Property<int>("Intelligence");

                    b.Property<string>("LoadoutId");

                    b.Property<int>("Luck");

                    b.Property<int?>("PartyId");

                    b.Property<DateTime>("SkillCooldown");

                    b.Property<int>("Strength");

                    b.HasKey("Id");

                    b.HasIndex("LoadoutId");

                    b.HasIndex("PartyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Doug.Models.User.UserEffect", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("EffectId");

                    b.Property<DateTime>("EndTime");

                    b.HasKey("UserId", "EffectId");

                    b.ToTable("UserEffect");
                });

            modelBuilder.Entity("Doug.Items.Consumable", b =>
                {
                    b.HasBaseType("Doug.Items.Item");

                    b.HasDiscriminator().HasValue("Consumable");
                });

            modelBuilder.Entity("Doug.Items.EquipmentItem", b =>
                {
                    b.HasBaseType("Doug.Items.Item");

                    b.Property<int>("Agility");

                    b.Property<int>("AgilityFactor");

                    b.Property<int>("AgilityRequirement");

                    b.Property<int>("AttackSpeed");

                    b.Property<int>("AttackSpeedFactor");

                    b.Property<int>("Constitution");

                    b.Property<int>("ConstitutionFactor");

                    b.Property<int>("ConstitutionRequirement");

                    b.Property<int>("CooldownReduction");

                    b.Property<int>("CriticalDamageFactor");

                    b.Property<int>("CriticalHitChanceFactor");

                    b.Property<int>("Defense");

                    b.Property<int>("DefenseFactor");

                    b.Property<int>("Dodge");

                    b.Property<string>("EffectId");

                    b.Property<int>("Energy");

                    b.Property<int>("EnergyFactor");

                    b.Property<int>("EnergyRegen");

                    b.Property<int>("FlatEnergyRegen");

                    b.Property<int>("FlatHealthRegen");

                    b.Property<int>("Health");

                    b.Property<int>("HealthFactor");

                    b.Property<int>("HealthRegen");

                    b.Property<int>("HitRateFactor");

                    b.Property<int>("Hitrate");

                    b.Property<int>("Intelligence");

                    b.Property<int>("IntelligenceFactor");

                    b.Property<int>("IntelligenceRequirement");

                    b.Property<int>("LevelRequirement");

                    b.Property<int>("Luck");

                    b.Property<int>("LuckFactor");

                    b.Property<int>("LuckRequirement");

                    b.Property<int>("MaxAttack");

                    b.Property<int>("MinAttack");

                    b.Property<int>("Pierce");

                    b.Property<int>("PierceFactor");

                    b.Property<int>("Resistance");

                    b.Property<int>("Slot");

                    b.Property<int>("Strength");

                    b.Property<int>("StrengthFactor");

                    b.Property<int>("StrengthRequirement");

                    b.HasDiscriminator().HasValue("EquipmentItem");
                });

            modelBuilder.Entity("Doug.Items.Food", b =>
                {
                    b.HasBaseType("Doug.Items.Consumable");

                    b.Property<int>("EnergyAmount");

                    b.Property<int>("HealthAmount");

                    b.HasDiscriminator().HasValue("Food");
                });

            modelBuilder.Entity("Doug.Items.Lootbox", b =>
                {
                    b.HasBaseType("Doug.Items.Consumable");

                    b.Property<string>("DropTableId");

                    b.HasIndex("DropTableId");

                    b.HasDiscriminator().HasValue("Lootbox");
                });

            modelBuilder.Entity("Doug.Items.Ticket", b =>
                {
                    b.HasBaseType("Doug.Items.Consumable");

                    b.Property<string>("Channel");

                    b.HasDiscriminator().HasValue("Ticket");
                });

            modelBuilder.Entity("Doug.Items.SkillBook", b =>
                {
                    b.HasBaseType("Doug.Items.EquipmentItem");

                    b.Property<string>("SkillId");

                    b.HasDiscriminator().HasValue("SkillBook");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Weapon", b =>
                {
                    b.HasBaseType("Doug.Items.EquipmentItem");

                    b.Property<bool>("IsDualWield");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("Doug.Items.SpecialFood", b =>
                {
                    b.HasBaseType("Doug.Items.Food");

                    b.Property<int>("Duration");

                    b.Property<string>("EffectId")
                        .HasColumnName("SpecialFood_EffectId");

                    b.HasDiscriminator().HasValue("SpecialFood");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Axe", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("Axe");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Bow", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("Bow");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Claws", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("Claws");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Dagger", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("Dagger");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.GreatSword", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("GreatSword");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Gun", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("Gun");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Shield", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("Shield");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Staff", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("Doug.Items.WeaponType.Sword", b =>
                {
                    b.HasBaseType("Doug.Items.WeaponType.Weapon");

                    b.HasDiscriminator().HasValue("Sword");
                });

            modelBuilder.Entity("Doug.Models.LootItem", b =>
                {
                    b.HasOne("Doug.Models.DropTable")
                        .WithMany("Items")
                        .HasForeignKey("DropTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.Monsters.Monster", b =>
                {
                    b.HasOne("Doug.Models.DropTable", "DropTable")
                        .WithMany()
                        .HasForeignKey("DropTableId");
                });

            modelBuilder.Entity("Doug.Models.Monsters.MonsterAttacker", b =>
                {
                    b.HasOne("Doug.Models.Monsters.SpawnedMonster", "Monster")
                        .WithMany("MonsterAttackers")
                        .HasForeignKey("SpawnedMonsterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doug.Models.User.User", "User")
                        .WithOne()
                        .HasForeignKey("Doug.Models.Monsters.MonsterAttacker", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.Monsters.RegionMonster", b =>
                {
                    b.HasOne("Doug.Models.Channel", "Channel")
                        .WithMany("Monsters")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.Monsters.SpawnedMonster", b =>
                {
                    b.HasOne("Doug.Models.Monsters.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId");
                });

            modelBuilder.Entity("Doug.Models.Party", b =>
                {
                    b.HasOne("Doug.Models.User.User", "Leader")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Doug.Models.ShopItem", b =>
                {
                    b.HasOne("Doug.Models.Shop", "Shop")
                        .WithMany("ShopItems")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.User.InventoryItem", b =>
                {
                    b.HasOne("Doug.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("Doug.Models.User.User", "User")
                        .WithMany("InventoryItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Models.User.Loadout", b =>
                {
                    b.HasOne("Doug.Items.EquipmentItem", "Body")
                        .WithMany()
                        .HasForeignKey("BodyId");

                    b.HasOne("Doug.Items.EquipmentItem", "Boots")
                        .WithMany()
                        .HasForeignKey("BootsId");

                    b.HasOne("Doug.Items.EquipmentItem", "Gloves")
                        .WithMany()
                        .HasForeignKey("GlovesId");

                    b.HasOne("Doug.Items.EquipmentItem", "Head")
                        .WithMany()
                        .HasForeignKey("HeadId");

                    b.HasOne("Doug.Items.EquipmentItem", "LeftHand")
                        .WithMany()
                        .HasForeignKey("LeftHandId");

                    b.HasOne("Doug.Items.EquipmentItem", "LeftRing")
                        .WithMany()
                        .HasForeignKey("LeftRingId");

                    b.HasOne("Doug.Items.EquipmentItem", "Neck")
                        .WithMany()
                        .HasForeignKey("NeckId");

                    b.HasOne("Doug.Items.EquipmentItem", "RightHand")
                        .WithMany()
                        .HasForeignKey("RightHandId");

                    b.HasOne("Doug.Items.EquipmentItem", "RightRing")
                        .WithMany()
                        .HasForeignKey("RightRingId");

                    b.HasOne("Doug.Items.SkillBook", "Skillbook")
                        .WithMany()
                        .HasForeignKey("SkillbookId");
                });

            modelBuilder.Entity("Doug.Models.User.User", b =>
                {
                    b.HasOne("Doug.Models.User.Loadout", "Loadout")
                        .WithMany()
                        .HasForeignKey("LoadoutId");

                    b.HasOne("Doug.Models.Party")
                        .WithMany("Users")
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("Doug.Models.User.UserEffect", b =>
                {
                    b.HasOne("Doug.Models.User.User", "User")
                        .WithMany("Effects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doug.Items.Lootbox", b =>
                {
                    b.HasOne("Doug.Models.DropTable", "DropTable")
                        .WithMany()
                        .HasForeignKey("DropTableId");
                });
#pragma warning restore 612, 618
        }
    }
}
